$version Generated by VerilatedVcd $end
$timescale 1s $end

 $scope module TOP $end
  $var wire  1 , clk $end
  $var wire  1 / i_rand_flag $end
  $var wire  8 . i_sed [7:0] $end
  $var wire  8 2 o_led [7:0] $end
  $var wire  1 3 o_rand_flag $end
  $var wire  8 1 o_seg_0 [7:0] $end
  $var wire  8 0 o_seg_1 [7:0] $end
  $var wire  1 - rst $end
  $scope module reg_top $end
   $var wire  1 , clk $end
   $var wire  1 / i_rand_flag $end
   $var wire  8 . i_sed [7:0] $end
   $var wire  8 2 o_led [7:0] $end
   $var wire  1 3 o_rand_flag $end
   $var wire  8 1 o_seg_0 [7:0] $end
   $var wire  8 0 o_seg_1 [7:0] $end
   $var wire  1 - rst $end
   $scope module u0_lfsr $end
    $var wire  1 , clk $end
    $var wire  4 4 count [3:0] $end
    $var wire  1 / i_rand_flag $end
    $var wire  8 . i_sed [7:0] $end
    $var wire  8 # o_q [7:0] $end
    $var wire  1 5 o_q_0 $end
    $var wire  1 6 o_q_1 $end
    $var wire  8 2 o_rand [7:0] $end
    $var wire  1 - rst $end
    $scope module u0 $end
     $var wire  1 , clk $end
     $var wire  1 5 i_d $end
     $var wire  1 $ o_q $end
    $upscope $end
    $scope module u1 $end
     $var wire  1 , clk $end
     $var wire  1 $ i_d $end
     $var wire  1 % o_q $end
    $upscope $end
    $scope module u2 $end
     $var wire  1 , clk $end
     $var wire  1 % i_d $end
     $var wire  1 & o_q $end
    $upscope $end
    $scope module u3 $end
     $var wire  1 , clk $end
     $var wire  1 & i_d $end
     $var wire  1 ' o_q $end
    $upscope $end
    $scope module u4 $end
     $var wire  1 , clk $end
     $var wire  1 ' i_d $end
     $var wire  1 ( o_q $end
    $upscope $end
    $scope module u5 $end
     $var wire  1 , clk $end
     $var wire  1 ( i_d $end
     $var wire  1 ) o_q $end
    $upscope $end
    $scope module u6 $end
     $var wire  1 , clk $end
     $var wire  1 ) i_d $end
     $var wire  1 * o_q $end
    $upscope $end
    $scope module u7 $end
     $var wire  1 , clk $end
     $var wire  1 * i_d $end
     $var wire  1 + o_q $end
    $upscope $end
   $upscope $end
   $scope module u0_seg_hex $end
    $var wire  8 2 i_seg [7:0] $end
    $var wire  8 1 o_seg_0 [7:0] $end
    $var wire  8 0 o_seg_1 [7:0] $end
    $scope module u0_seg $end
     $var wire  4 7 i_seg [3:0] $end
     $var wire  8 9 num0 [7:0] $end
     $var wire  8 : num1 [7:0] $end
     $var wire  8 ; num2 [7:0] $end
     $var wire  8 < num3 [7:0] $end
     $var wire  8 = num4 [7:0] $end
     $var wire  8 > num5 [7:0] $end
     $var wire  8 ? num6 [7:0] $end
     $var wire  8 @ num7 [7:0] $end
     $var wire  8 A num8 [7:0] $end
     $var wire  8 B num9 [7:0] $end
     $var wire  8 C numa [7:0] $end
     $var wire  8 D numb [7:0] $end
     $var wire  8 E numc [7:0] $end
     $var wire  8 F numd [7:0] $end
     $var wire  8 G nume [7:0] $end
     $var wire  8 H numf [7:0] $end
     $var wire  8 1 o_seg [7:0] $end
    $upscope $end
    $scope module u1_seg $end
     $var wire  4 8 i_seg [3:0] $end
     $var wire  8 9 num0 [7:0] $end
     $var wire  8 : num1 [7:0] $end
     $var wire  8 ; num2 [7:0] $end
     $var wire  8 < num3 [7:0] $end
     $var wire  8 = num4 [7:0] $end
     $var wire  8 > num5 [7:0] $end
     $var wire  8 ? num6 [7:0] $end
     $var wire  8 @ num7 [7:0] $end
     $var wire  8 A num8 [7:0] $end
     $var wire  8 B num9 [7:0] $end
     $var wire  8 C numa [7:0] $end
     $var wire  8 D numb [7:0] $end
     $var wire  8 E numc [7:0] $end
     $var wire  8 F numd [7:0] $end
     $var wire  8 G nume [7:0] $end
     $var wire  8 H numf [7:0] $end
     $var wire  8 0 o_seg [7:0] $end
    $upscope $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#1
b00000000 #
0$
0%
0&
0'
0(
0)
0*
0+
1,
1-
b10011001 .
0/
b00000011 0
b00000011 1
b00000000 2
03
b0000 4
05
06
b0000 7
b0000 8
b11111100 9
b01100000 :
b11011010 ;
b11110010 <
b01100110 =
b10110110 >
b10111110 ?
b11100000 @
b11111110 A
b11100110 B
b11101110 C
b00111110 D
b10011100 E
b01111010 F
b10011110 G
b10001110 H
#2
0,
#3
1,
b0001 4
15
16
#4
b00000001 #
1$
0,
#5
1,
b0010 4
05
06
#6
b00000010 #
0$
1%
0,
#7
1,
b0011 4
#8
b00000100 #
0%
1&
0,
#9
1,
b0100 4
15
16
#10
b00001001 #
1$
0&
1'
0,
#11
1,
b0101 4
#12
b00010011 #
1%
0'
1(
0,
#13
1,
b0110 4
05
06
#14
b00100110 #
0$
1&
0(
1)
0,
#15
1,
b0111 4
#16
b01001100 #
0%
1'
0)
1*
0,
1/
13
#17
1,
b1000 4
15
16
#18
b10011001 #
1$
0&
1(
0*
1+
0,
#19
1,
b00011001 0
b00011001 1
b10011001 2
06
b1001 7
b1001 8
#20
b00110011 #
1%
0'
1)
0+
0,
05
#21
1,
b00001101 0
b00001101 1
b00110011 2
b0011 7
b0011 8
#22
b01100110 #
0$
1&
0(
1*
0,
15
#23
1,
b01000001 0
b01000001 1
b01100110 2
b0110 7
b0110 8
#24
b11001101 #
1$
0%
1'
0)
1+
0,
05
#25
1,
b01100011 0
b10000101 1
b11001101 2
b1101 7
b1100 8
#26
b10011010 #
0$
1%
0&
1(
0*
0,
15
#27
1,
b00011001 0
b00010001 1
b10011010 2
b1010 7
b1001 8
#28
b00110101 #
1$
0%
1&
0'
1)
0+
0,
05
#29
1,
b00001101 0
b01001001 1
b00110101 2
b0101 7
b0011 8
#30
b01101010 #
0$
1%
0&
1'
0(
1*
0,
#31
1,
b01000001 0
b00010001 1
b01101010 2
b1010 7
b0110 8
#32
b11010100 #
0%
1&
0'
1(
0)
1+
0,
#33
1,
b10000101 0
b10011001 1
b11010100 2
b0100 7
b1101 8
#34
b10101000 #
0&
1'
0(
1)
0*
0,
15
#35
1,
b00010001 0
b00000001 1
b10101000 2
b1000 7
b1010 8
#36
b01010001 #
1$
0'
1(
0)
1*
0+
0,
0/
03
#37
1,
#38
b10100011 #
1%
0(
1)
0*
1+
0,
05
#39
1,
#40
b01000110 #
0$
1&
0)
1*
0+
0,
#41
1,
#42
b10001100 #
0%
1'
0*
1+
0,
#43
1,
#44
b00011000 #
0&
1(
0+
0,
#45
1,
#46
b00110000 #
0'
1)
0,
