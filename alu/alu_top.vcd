$version Generated by VerilatedVcd $end
$timescale 1s $end

 $scope module TOP $end
  $var wire  4 b i_a [3:0] $end
  $var wire  4 c i_b [3:0] $end
  $var wire  3 d i_op [2:0] $end
  $var wire  1 f o_carry $end
  $var wire  1 k o_equ $end
  $var wire  4 e o_led [3:0] $end
  $var wire  1 j o_max $end
  $var wire  8 h o_minus [7:0] $end
  $var wire  1 i o_overflow $end
  $var wire  8 g o_seg [7:0] $end
  $scope module alu_top $end
   $var wire  1 9 carry_0 $end
   $var wire  1 : carry_1 $end
   $var wire  1 n equ_0 $end
   $var wire  4 b i_a [3:0] $end
   $var wire  4 / i_a_2 [3:0] $end
   $var wire  4 c i_b [3:0] $end
   $var wire  4 0 i_b_2 [3:0] $end
   $var wire  3 d i_op [2:0] $end
   $var wire  4 2 led_0 [3:0] $end
   $var wire  4 3 led_1 [3:0] $end
   $var wire  4 m led_2 [3:0] $end
   $var wire  4 4 led_3 [3:0] $end
   $var wire  4 5 led_4 [3:0] $end
   $var wire  4 6 led_5 [3:0] $end
   $var wire  4 7 led_6 [3:0] $end
   $var wire  4 b led_7 [3:0] $end
   $var wire  1 = max_0 $end
   $var wire  1 f o_carry $end
   $var wire  1 k o_equ $end
   $var wire  4 e o_led [3:0] $end
   $var wire  4 8 o_led_0 [3:0] $end
   $var wire  1 j o_max $end
   $var wire  8 h o_minus [7:0] $end
   $var wire  1 i o_overflow $end
   $var wire  8 g o_seg [7:0] $end
   $var wire  1 ; overflow_0 $end
   $var wire  1 < overflow_1 $end
   $var wire  4 l sub_i_b [3:0] $end
   $var wire  4 1 sub_i_b_2 [3:0] $end
   $scope module i0 $end
    $var wire 32 s DATA_LEN [31:0] $end
    $var wire 32 r KEY_LEN [31:0] $end
    $var wire 32 q NR_KEY [31:0] $end
    $var wire  3 d key [2:0] $end
    $var wire 56 o lut [55:0] $end
    $var wire  4 8 out [3:0] $end
    $scope module i0 $end
     $var wire 32 s DATA_LEN [31:0] $end
     $var wire 32 t HAS_DEFAULT [31:0] $end
     $var wire 32 r KEY_LEN [31:0] $end
     $var wire 32 q NR_KEY [31:0] $end
     $var wire 32 v PAIR_LEN [31:0] $end
     $var wire  4 F data_list[0] [3:0] $end
     $var wire  4 G data_list[1] [3:0] $end
     $var wire  4 H data_list[2] [3:0] $end
     $var wire  4 I data_list[3] [3:0] $end
     $var wire  4 J data_list[4] [3:0] $end
     $var wire  4 K data_list[5] [3:0] $end
     $var wire  4 L data_list[6] [3:0] $end
     $var wire  4 M data_list[7] [3:0] $end
     $var wire  4 u default_out [3:0] $end
     $var wire  1 O hit $end
     $var wire 32 w i [31:0] $end
     $var wire  3 d key [2:0] $end
     $var wire  3 # key_list[0] [2:0] $end
     $var wire  3 $ key_list[1] [2:0] $end
     $var wire  3 % key_list[2] [2:0] $end
     $var wire  3 & key_list[3] [2:0] $end
     $var wire  3 ' key_list[4] [2:0] $end
     $var wire  3 ( key_list[5] [2:0] $end
     $var wire  3 ) key_list[6] [2:0] $end
     $var wire  3 * key_list[7] [2:0] $end
     $var wire 56 o lut [55:0] $end
     $var wire  4 N lut_out [3:0] $end
     $var wire  4 8 out [3:0] $end
     $var wire  7 > pair_list[0] [6:0] $end
     $var wire  7 ? pair_list[1] [6:0] $end
     $var wire  7 @ pair_list[2] [6:0] $end
     $var wire  7 A pair_list[3] [6:0] $end
     $var wire  7 B pair_list[4] [6:0] $end
     $var wire  7 C pair_list[5] [6:0] $end
     $var wire  7 D pair_list[6] [6:0] $end
     $var wire  7 E pair_list[7] [6:0] $end
    $upscope $end
   $upscope $end
   $scope module i2 $end
    $var wire 32 y DATA_LEN [31:0] $end
    $var wire 32 r KEY_LEN [31:0] $end
    $var wire 32 x NR_KEY [31:0] $end
    $var wire  3 d key [2:0] $end
    $var wire  8 P lut [7:0] $end
    $var wire  1 f out [0:0] $end
    $scope module i0 $end
     $var wire 32 y DATA_LEN [31:0] $end
     $var wire 32 t HAS_DEFAULT [31:0] $end
     $var wire 32 r KEY_LEN [31:0] $end
     $var wire 32 x NR_KEY [31:0] $end
     $var wire 32 s PAIR_LEN [31:0] $end
     $var wire  1 S data_list[0] [0:0] $end
     $var wire  1 T data_list[1] [0:0] $end
     $var wire  1 z default_out [0:0] $end
     $var wire  1 V hit $end
     $var wire 32 { i [31:0] $end
     $var wire  3 d key [2:0] $end
     $var wire  3 + key_list[0] [2:0] $end
     $var wire  3 , key_list[1] [2:0] $end
     $var wire  8 P lut [7:0] $end
     $var wire  1 U lut_out [0:0] $end
     $var wire  1 f out [0:0] $end
     $var wire  4 Q pair_list[0] [3:0] $end
     $var wire  4 R pair_list[1] [3:0] $end
    $upscope $end
   $upscope $end
   $scope module i3 $end
    $var wire 32 y DATA_LEN [31:0] $end
    $var wire 32 r KEY_LEN [31:0] $end
    $var wire 32 x NR_KEY [31:0] $end
    $var wire  3 d key [2:0] $end
    $var wire  8 W lut [7:0] $end
    $var wire  1 i out [0:0] $end
    $scope module i0 $end
     $var wire 32 y DATA_LEN [31:0] $end
     $var wire 32 t HAS_DEFAULT [31:0] $end
     $var wire 32 r KEY_LEN [31:0] $end
     $var wire 32 x NR_KEY [31:0] $end
     $var wire 32 s PAIR_LEN [31:0] $end
     $var wire  1 Z data_list[0] [0:0] $end
     $var wire  1 [ data_list[1] [0:0] $end
     $var wire  1 z default_out [0:0] $end
     $var wire  1 ] hit $end
     $var wire 32 { i [31:0] $end
     $var wire  3 d key [2:0] $end
     $var wire  3 - key_list[0] [2:0] $end
     $var wire  3 . key_list[1] [2:0] $end
     $var wire  8 W lut [7:0] $end
     $var wire  1 \ lut_out [0:0] $end
     $var wire  1 i out [0:0] $end
     $var wire  4 X pair_list[0] [3:0] $end
     $var wire  4 Y pair_list[1] [3:0] $end
    $upscope $end
   $upscope $end
   $scope module u0_adder $end
    $var wire  4 / i_a [3:0] $end
    $var wire  4 0 i_b [3:0] $end
    $var wire  4 ^ led [3:0] $end
    $var wire  1 9 o_carry $end
    $var wire  4 2 o_led [3:0] $end
    $var wire  1 ; o_overflow $end
   $upscope $end
   $scope module u0_log_and $end
    $var wire  4 b i_a [3:0] $end
    $var wire  4 c i_b [3:0] $end
    $var wire  4 4 o_led [3:0] $end
   $upscope $end
   $scope module u0_log_equ $end
    $var wire  4 b i_a [3:0] $end
    $var wire  4 c i_b [3:0] $end
    $var wire  1 n o_equ $end
    $var wire  4 b o_led [3:0] $end
   $upscope $end
   $scope module u0_log_max $end
    $var wire  4 b i_a [3:0] $end
    $var wire  4 c i_b [3:0] $end
    $var wire  4 7 o_led [3:0] $end
    $var wire  1 = o_max $end
   $upscope $end
   $scope module u0_log_nor $end
    $var wire  4 b i_a [3:0] $end
    $var wire  4 m o_led [3:0] $end
   $upscope $end
   $scope module u0_log_or $end
    $var wire  4 b i_a [3:0] $end
    $var wire  4 c i_b [3:0] $end
    $var wire  4 5 o_led [3:0] $end
   $upscope $end
   $scope module u0_log_xor $end
    $var wire  4 b i_a [3:0] $end
    $var wire  4 c i_b [3:0] $end
    $var wire  4 6 o_led [3:0] $end
   $upscope $end
   $scope module u0_seg $end
    $var wire  1 _ i_minus $end
    $var wire  3 ` i_seg [2:0] $end
    $var wire  8 | num0 [7:0] $end
    $var wire  8 } num1 [7:0] $end
    $var wire  8 ~ num2 [7:0] $end
    $var wire  8 !! num3 [7:0] $end
    $var wire  8 "! num4 [7:0] $end
    $var wire  8 #! num5 [7:0] $end
    $var wire  8 $! num6 [7:0] $end
    $var wire  8 %! num7 [7:0] $end
    $var wire  8 &! num8 [7:0] $end
    $var wire  8 g o_seg [7:0] $end
   $upscope $end
   $scope module u1_adder $end
    $var wire  4 / i_a [3:0] $end
    $var wire  4 1 i_b [3:0] $end
    $var wire  4 a led [3:0] $end
    $var wire  1 : o_carry $end
    $var wire  4 3 o_led [3:0] $end
    $var wire  1 < o_overflow $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#1
b111 #
b110 $
b101 %
b100 &
b011 '
b010 (
b001 )
b000 *
b001 +
b000 ,
b001 -
b000 .
b1101 /
b1101 0
b0011 1
b1101 2
b0000 3
b1011 4
b1011 5
b0000 6
b1011 7
b0000 8
19
1:
0;
0<
0=
b1111011 >
b1101011 ?
b1010000 @
b1001011 A
b0111011 B
b0100100 C
b0010000 D
b0001101 E
b1011 F
b1011 G
b0000 H
b1011 I
b1011 J
b0100 K
b0000 L
b1101 M
b0000 N
1O
b00010011 P
b0011 Q
b0001 R
1S
1T
1U
1V
b00000010 W
b0010 X
b0000 Y
0Z
0[
0\
1]
b1010 ^
0_
b000 `
b0000 a
b1011 b
b1011 c
b001 d
b0000 e
1f
b00000010 g
b11111111 h
0i
0j
0k
b0011 l
b0100 m
1n
b00011010010000010010001110111001011101000011010111111011 o
b00000000000000000000000000001000 q
b00000000000000000000000000000011 r
b00000000000000000000000000000100 s
b00000000000000000000000000000000 t
b0000 u
b00000000000000000000000000000111 v
b00000000000000000000000000001000 w
b00000000000000000000000000000010 x
b00000000000000000000000000000001 y
0z
b00000000000000000000000000000010 {
b11111101 |
b01100000 }
b11011010 ~
b11110010 !!
b01100110 "!
b10110110 #!
b10111110 $!
b11100000 %!
b11111111 &!
#2
